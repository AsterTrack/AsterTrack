{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
       { // For linux only as of now
            // Extension: cortex-debug, needs OpenOCD 0.11.0+ (not on linux APT repo yet) 
            // To build OpenOCD on linux from git, follow instructions and build with "./configure --enable-stlink"
            // Also test arm-none-eabi-gdb separately if all dependencies are there in case cortex-debug doesn't work
            "name": "JTAG DEBUGGING CH32V307",
            "cwd": "${workspaceFolder}",
            "executable": "./build/TrackingController.elf",

            // Bit of a hackery to get a ARM debugging extension to accept RISC-V
            "type": "cortex-debug",
            "armToolchainPath": "/opt/riscv-none-elf-gcc-xpack-12-2/bin/",
            "toolchainPrefix": "riscv-none-elf",
            "servertype": "openocd",
            "serverpath": "/opt/riscv-none-elf-gcc-xpack-12-2/bin/openocd",

            "request": "attach",
            "interface": "swd",
            // CH32V307
            "device": "CH32V307VCT6",
            "configFiles": [
                "ch32v307/wch-riscv.cfg"
            ],
            "debuggerArgs": [
                "-d",
                "${workspaceFolder}"
            ],
            "overrideAttachCommands": [
                "set mem inaccessible-by-default off",
                "set architecture riscv:rv32",
                "monitor halt",
                //"continue",
            ],
            "preRestartCommands": [
                "enable breakpoint",
                "monitor reset halt",
            ]
       }
       { // For linux only as of now
            // Extension: cortex-debug, needs OpenOCD 0.11.0+ (not on linux APT repo yet) 
            // To build OpenOCD on linux from git, follow instructions and build with "./configure --enable-stlink"
            // Also test arm-none-eabi-gdb separately if all dependencies are there in case cortex-debug doesn't work
            "name": "JTAG DEBUGGING CH32V307 Config",
            "cwd": "${workspaceFolder}",
            "executable": "./build/configurator.elf",

            // Bit of a hackery to get a ARM debugging extension to accept RISC-V
            "type": "cortex-debug",
            "armToolchainPath": "/opt/riscv-none-elf-gcc-xpack-12-2/bin/",
            "toolchainPrefix": "riscv-none-elf",
            "servertype": "openocd",
            "serverpath": "/opt/riscv-none-elf-gcc-xpack-12-2/bin/openocd",

            "request": "attach",
            "interface": "swd",
            // CH32V307
            "device": "CH32V307VCT6",
            "configFiles": [
                "ch32v307/wch-riscv.cfg"
            ],
            "debuggerArgs": [
                "-d",
                "${workspaceFolder}"
            ],
            "preRestartCommands": [
                "set mem inaccessible-by-default off",
                "set architecture riscv:rv32",
                "load",
                "enable breakpoint",
                "monitor reset halt",
            ]
       }
    ]
}