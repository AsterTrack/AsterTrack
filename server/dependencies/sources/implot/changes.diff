diff --git a/implot.cpp b/implot.cpp
index effc52f..0d72ffd 100644
--- a/implot.cpp
+++ b/implot.cpp
@@ -3474,7 +3474,7 @@ bool BeginSubplots(const char* title, int rows, int cols, const ImVec2& size, Im
                 DrawList.AddLine(ImVec2(IM_ROUND(subplot.GridRect.Min.x),IM_ROUND(ypos)),
                                  ImVec2(IM_ROUND(subplot.GridRect.Max.x),IM_ROUND(ypos)),
                                  sep_hld ? act_col : hov_col, SUBPLOT_BORDER_SIZE);
-                ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeNS);
+                ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeRow);
             }
             separator++;
         }
@@ -3504,7 +3504,7 @@ bool BeginSubplots(const char* title, int rows, int cols, const ImVec2& size, Im
                 DrawList.AddLine(ImVec2(IM_ROUND(xpos),IM_ROUND(subplot.GridRect.Min.y)),
                                  ImVec2(IM_ROUND(xpos),IM_ROUND(subplot.GridRect.Max.y)),
                                  sep_hld ? act_col : hov_col, SUBPLOT_BORDER_SIZE);
-                ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeEW);
+                ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeCol);
             }
             separator++;
         }
@@ -3981,7 +3981,7 @@ bool DragLineX(int n_id, double* value, const ImVec4& col, float thickness, ImPl
     }
 
     if ((hovered || held) && show_curs)
-        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeEW);
+        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeCol);
 
     float len = gp.Style.MajorTickLen.x;
     ImVec4 color = IsColorAuto(col) ? ImGui::GetStyleColorVec4(ImGuiCol_Text) : col;
@@ -4037,7 +4037,7 @@ bool DragLineY(int n_id, double* value, const ImVec4& col, float thickness, ImPl
     }
 
     if ((hovered || held) && show_curs)
-        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeNS);
+        ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeRow);
 
     float len = gp.Style.MajorTickLen.y;
     ImVec4 color = IsColorAuto(col) ? ImGui::GetStyleColorVec4(ImGuiCol_Text) : col;
diff --git a/implot.h b/implot.h
index ae1f600..1a2b7ae 100644
--- a/implot.h
+++ b/implot.h
@@ -911,6 +911,7 @@ IMPLOT_TMP double PlotHistogram2D(const char* label_id, const T* xs, const T* ys
 
 // Plots digital data. Digital plots do not respond to y drag or zoom, and are always referenced to the bottom of the plot.
 IMPLOT_TMP void PlotDigital(const char* label_id, const T* xs, const T* ys, int count, ImPlotDigitalFlags flags=0, int offset=0, int stride=sizeof(T));
+IMPLOT_TMP void PlotDigital(const char* label_id, const T* values, int count, double shift=0, ImPlotDigitalFlags flags=0, int offset=0, int stride=sizeof(T));
 IMPLOT_API void PlotDigitalG(const char* label_id, ImPlotGetter getter, void* data, int count, ImPlotDigitalFlags flags=0);
 
 // Plots an axis-aligned image. #bounds_min/bounds_max are in plot coordinates (y-up) and #uv0/uv1 are in texture coordinates (y-down).
diff --git a/implot_items.cpp b/implot_items.cpp
index f7de346..3357601 100644
--- a/implot_items.cpp
+++ b/implot_items.cpp
@@ -2715,55 +2715,43 @@ void PlotDigitalEx(const char* label_id, Getter getter, ImPlotDigitalFlags flags
         ImPlotContext& gp = *GImPlot;
         ImDrawList& draw_list = *GetPlotDrawList();
         const ImPlotNextItemData& s = GetItemData();
-        if (getter.Count > 1 && s.RenderFill) {
-            ImPlotPlot& plot   = *gp.CurrentPlot;
-            ImPlotAxis& x_axis = plot.Axes[plot.CurrentX];
-            ImPlotAxis& y_axis = plot.Axes[plot.CurrentY];
-
-            int pixYMax = 0;
-            ImPlotPoint itemData1 = getter(0);
-            for (int i = 0; i < getter.Count; ++i) {
-                ImPlotPoint itemData2 = getter(i);
-                if (ImNanOrInf(itemData1.y)) {
-                    itemData1 = itemData2;
-                    continue;
-                }
-                if (ImNanOrInf(itemData2.y)) itemData2.y = ImConstrainNan(ImConstrainInf(itemData2.y));
-                int pixY_0 = (int)(s.LineWeight);
-                itemData1.y = ImMax(0.0, itemData1.y);
-                float pixY_1_float = s.DigitalBitHeight * (float)itemData1.y;
-                int pixY_1 = (int)(pixY_1_float); //allow only positive values
-                int pixY_chPosOffset = (int)(ImMax(s.DigitalBitHeight, pixY_1_float) + s.DigitalBitGap);
-                pixYMax = ImMax(pixYMax, pixY_chPosOffset);
-                ImVec2 pMin = PlotToPixels(itemData1,IMPLOT_AUTO,IMPLOT_AUTO);
-                ImVec2 pMax = PlotToPixels(itemData2,IMPLOT_AUTO,IMPLOT_AUTO);
-                int pixY_Offset = 0; //20 pixel from bottom due to mouse cursor label
-                pMin.y = (y_axis.PixelMin) + ((-gp.DigitalPlotOffset)                   - pixY_Offset);
-                pMax.y = (y_axis.PixelMin) + ((-gp.DigitalPlotOffset) - pixY_0 - pixY_1 - pixY_Offset);
-                //plot only one rectangle for same digital state
-                while (((i+2) < getter.Count) && (itemData1.y == itemData2.y)) {
-                    const int in = (i + 1);
-                    itemData2 = getter(in);
-                    if (ImNanOrInf(itemData2.y)) break;
-                    pMax.x = PlotToPixels(itemData2,IMPLOT_AUTO,IMPLOT_AUTO).x;
-                    i++;
-                }
-                //do not extend plot outside plot range
-                if (pMin.x < x_axis.PixelMin) pMin.x = x_axis.PixelMin;
-                if (pMax.x < x_axis.PixelMin) pMax.x = x_axis.PixelMin;
-                if (pMin.x > x_axis.PixelMax) pMin.x = x_axis.PixelMax - 1; //fix issue related to https://github.com/ocornut/imgui/issues/3976
-                if (pMax.x > x_axis.PixelMax) pMax.x = x_axis.PixelMax - 1; //fix issue related to https://github.com/ocornut/imgui/issues/3976
-                //plot a rectangle that extends up to x2 with y1 height
-                if ((pMax.x > pMin.x) && (gp.CurrentPlot->PlotRect.Contains(pMin) || gp.CurrentPlot->PlotRect.Contains(pMax))) {
-                    // ImVec4 colAlpha = item->Color;
-                    // colAlpha.w = item->Highlight ? 1.0f : 0.9f;
-                    draw_list.AddRectFilled(pMin, pMax, ImGui::GetColorU32(s.Colors[ImPlotCol_Fill]));
-                }
-                itemData1 = itemData2;
+
+        ImPlotPlot& plot   = *gp.CurrentPlot;
+        ImPlotAxis& x_axis = plot.Axes[plot.CurrentX];
+        ImPlotAxis& y_axis = plot.Axes[plot.CurrentY];
+
+        for (int i = 0; i < getter.Count; ++i) {
+            ImPlotPoint itemData1 = getter(i);
+            if (ImNanOrInf(itemData1.y)) continue;
+            //plot only one rectangle for same digital state
+            ImPlotPoint itemData2 = itemData1;
+            bool foundEnd = false;
+            for (; (i+1) < getter.Count; i++) {
+                itemData2 = getter(i+1);
+                foundEnd = ImNanOrInf(itemData2.y) || itemData1.y != itemData2.y;
+                if (foundEnd) break; // Found terminating item 
+            }
+            //calulate extends of digital signal
+            ImVec2 pMin, pMax;
+            pMin.x = x_axis.PlotToPixels(itemData1.x);
+            //ensure width of last item with same digital state
+            pMax.x = x_axis.PlotToPixels(itemData2.x + (foundEnd? 0.0f : 1.0f));
+            pMin.y = y_axis.PixelMin - gp.DigitalPlotOffset;
+            pMax.y = y_axis.PixelMin - gp.DigitalPlotOffset - s.LineWeight - s.DigitalBitHeight;
+            //do not extend plot outside plot range
+            if (pMin.x < x_axis.PixelMin) pMin.x = x_axis.PixelMin;
+            if (pMax.x < x_axis.PixelMin) pMax.x = x_axis.PixelMin;
+            if (pMin.x >= x_axis.PixelMax) pMin.x = x_axis.PixelMax - 0.1f; //fix issue related to https://github.com/ocornut/imgui/issues/3976
+            if (pMax.x >= x_axis.PixelMax) pMax.x = x_axis.PixelMax - 0.1f; //fix issue related to https://github.com/ocornut/imgui/issues/3976
+            //plot a rectangle that extends up to x2 with y1 height
+            if ((pMax.x > pMin.x) && (gp.CurrentPlot->PlotRect.Contains(pMin) || gp.CurrentPlot->PlotRect.Contains(pMax))) {
+                // ImVec4 colAlpha = item->Color;
+                // colAlpha.w = item->Highlight ? 1.0f : 0.9f;
+                draw_list.AddRectFilled(pMin, pMax, GetColormapColorU32(ImMax(0.0, itemData1.y), IMPLOT_AUTO));
             }
-            gp.DigitalPlotItemCnt++;
-            gp.DigitalPlotOffset += pixYMax;
         }
+        gp.DigitalPlotItemCnt++;
+        gp.DigitalPlotOffset += s.DigitalBitHeight + s.DigitalBitGap;
         EndItem();
     }
 }
@@ -2774,10 +2762,21 @@ void PlotDigital(const char* label_id, const T* xs, const T* ys, int count, ImPl
     GetterXY<IndexerIdx<T>,IndexerIdx<T>> getter(IndexerIdx<T>(xs,count,offset,stride),IndexerIdx<T>(ys,count,offset,stride),count);
     return PlotDigitalEx(label_id, getter, flags);
 }
+
 #define INSTANTIATE_MACRO(T) template IMPLOT_API void PlotDigital<T>(const char* label_id, const T* xs, const T* ys, int count, ImPlotDigitalFlags flags, int offset, int stride);
 CALL_INSTANTIATE_FOR_NUMERIC_TYPES()
 #undef INSTANTIATE_MACRO
 
+template <typename T>
+void PlotDigital(const char* label_id, const T* values, int count, double shift, ImPlotDigitalFlags flags, int offset, int stride) {
+    GetterXY<IndexerLin,IndexerIdx<T>> getter(IndexerLin(1.0,shift),IndexerIdx<T>(values,count,offset,stride),count);
+    return PlotDigitalEx(label_id, getter, flags);
+}
+
+#define INSTANTIATE_MACRO(T) template IMPLOT_API void PlotDigital<T>(const char* label_id, const T* values, int count, double shift, ImPlotDigitalFlags flags, int offset, int stride);
+CALL_INSTANTIATE_FOR_NUMERIC_TYPES()
+#undef INSTANTIATE_MACRO
+
 // custom
 void PlotDigitalG(const char* label_id, ImPlotGetter getter_func, void* data, int count, ImPlotDigitalFlags flags) {
     GetterFuncPtr getter(getter_func,data,count);
